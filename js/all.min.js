function makeRequest(){var e=$("#service").find(":selected").val();switch(e){case"g":getGoogle();break;case"b":getBitly();break;case"t":getTinyURL();break;case"i":getIsgd();break;case"v":getVgd();break;default:Google()}}function getGoogle(){var e=$("#fullURL").val().toLowerCase(),o=gapi.client.urlshortener.url.insert({resource:{longUrl:e}});o.execute(function(e){if(isEmpty(e.id))$("#error").show(),$("#error").text("error: creating short url: goo.gl");else{var o=e.id;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)}})}function getBitly(){var e="o_4qkhbs5vl0",o="R_3773937f1ac64e88ae4fe130d6356681",r=$("#fullURL").val().toLowerCase();$.ajax({url:"https://api-ssl.bitly.com/v3/shorten",data:{longUrl:r,apiKey:o,login:e},dataType:"jsonp",success:function(e){var o=e.data.url;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)},error:function(){$("#error").show(),$("#error").text("error: creating short url: bit.ly")}})}function getTinyURL(){var e=$("#fullURL").val().toLowerCase();$.getJSON("https://urltinyfy.appspot.com/tinyurl?url="+encodeURIComponent(e)+"&callback=?",function(e){var o=e.tinyurl;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)}).fail(function(e,o,r){$("#error").show(),$("#error").text("error: creating short url: TinyURL")})}function getIsgd(){var e=$("#fullURL").val().toLowerCase();$.getJSON("https://urltinyfy.appspot.com/isgd?url="+encodeURIComponent(e)+"&callback=?",function(e){var o=e.tinyurl;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)}).fail(function(e,o,r){$("#error").show(),$("#error").text("error: creating short url: is.gd")})}function getVgd(){var e=$("#fullURL").val().toLowerCase();$.getJSON("https://urltinyfy.appspot.com/vgd?url="+encodeURIComponent(e)+"&callback=?",function(e){var o=e.tinyurl;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)}).fail(function(e,o,r){$("#error").show(),$("#error").text("error: creating short url: v.gd")})}function load(){$("#error").hide(),$("#error").addClass("isa_error"),$("#click-to-copy").hide(),gapi.client.setApiKey("AIzaSyAFPETEhOLJGMLUq9Ql_o3lyJtvJ5IUaqo"),gapi.client.load("urlshortener","v1",function(){})}function get_QRCode(e){var o=120;isEmpty(e)||jQuery("#qrcode").qrcode({width:o,height:o,text:e})}function isUrl(e){var o="^((https|http|ftp|rtsp|mms)?://)?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9a-z_!~*'()-]+.)*([0-9a-z][0-9a-z-]{0,61})?[0-9a-z].[a-z]{2,6})((/?)|(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$",r=new RegExp(o);return r.test(e)}function isEmpty(e){return!e||0===e.length}$(document).ready(function(){$("form").submit(function(e){e.preventDefault();{var o=$("#fullURL").val().toLowerCase();$("#shortenURL").val(),$("#service").find(":selected").val()}$("#error").text(""),$("#shortenURL").text(""),$("#qrcode").text(""),isUrl(o)?($("#form").removeClass("has-error").addClass("has-success"),$(".glyphicon").removeClass("glyphicon-remove").addClass("glyphicon-ok"),$("#error").hide(),makeRequest()):($("#form").removeClass("has-success").addClass("has-error"),$(".glyphicon").removeClass("glyphicon-ok").addClass("glyphicon-remove"),$("#error").show(),$("#error").text("URL format is not correct"),$("#click-to-copy").hide())}),$("#clean").click(function(){$("#fullURL").val(""),$("#error").hide(),$("#error").text(""),$("#click-to-copy").hide(),$("#shortenURL").text(""),$("#qrcode").text(""),$("#form").removeClass("has-error").removeClass("has-success"),$(".glyphicon").removeClass("glyphicon-remove").removeClass("glyphicon-ok")});var e=new ZeroClipboard($("#click-to-copy"),{moviePath:"./flash/ZeroClipboard.swf",debug:!1});e.on("load",function(e){e.on("complete",function(e,o){e.setText(o.text)})}),$("#click-to-copy").tooltip(),function(e,o,r){var t,a=e.getElementsByTagName(o)[0];e.getElementById(r)||(t=e.createElement(o),t.id=r,t.src="//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4&appId=914645301919009",a.parentNode.insertBefore(t,a))}(document,"script","facebook-jssdk")}),window.onload=load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsibWFrZVJlcXVlc3QiLCJzZXJ2aWNlIiwiJCIsImZpbmQiLCJ2YWwiLCJnZXRHb29nbGUiLCJnZXRCaXRseSIsImdldFRpbnlVUkwiLCJnZXRJc2dkIiwiZ2V0VmdkIiwiR29vZ2xlIiwiZnVsbFVSTCIsInRvTG93ZXJDYXNlIiwicmVxdWVzdCIsImdhcGkiLCJjbGllbnQiLCJ1cmxzaG9ydGVuZXIiLCJ1cmwiLCJpbnNlcnQiLCJyZXNvdXJjZSIsImxvbmdVcmwiLCJleGVjdXRlIiwicmVzcG9uc2UiLCJpc0VtcHR5IiwiaWQiLCJzaG93IiwidGV4dCIsInMiLCJnZXRfUVJDb2RlIiwidXNlcm5hbWUiLCJrZXkiLCJhamF4IiwiZGF0YSIsImFwaUtleSIsImxvZ2luIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwidiIsImVycm9yIiwiZ2V0SlNPTiIsImVuY29kZVVSSUNvbXBvbmVudCIsInRpbnl1cmwiLCJmYWlsIiwianFYSFIiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJsb2FkIiwiaGlkZSIsImFkZENsYXNzIiwic2V0QXBpS2V5Iiwic2l6ZSIsImpRdWVyeSIsInFyY29kZSIsIndpZHRoIiwiaGVpZ2h0IiwiaXNVcmwiLCJzdHJSZWdleCIsInJlIiwiUmVnRXhwIiwidGVzdCIsInN0ciIsImxlbmd0aCIsImRvY3VtZW50IiwicmVhZHkiLCJzdWJtaXQiLCJlIiwicHJldmVudERlZmF1bHQiLCJyZW1vdmVDbGFzcyIsImNsaWNrIiwiWmVyb0NsaXBib2FyZCIsIm1vdmllUGF0aCIsImRlYnVnIiwib24iLCJhcmdzIiwic2V0VGV4dCIsInRvb2x0aXAiLCJkIiwianMiLCJmanMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJ3aW5kb3ciLCJvbmxvYWQiXSwibWFwcGluZ3MiOiJBQXdFQSxRQUFB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QUNBMUQsRUFBQTJELFFBQUFELEVBQUEvQyxVQUtBeEIsRUFBQSxrQkFBQXlFLFVBR0EsU0FBQUMsRUFBQWpELEVBQUFILEdBQ0EsR0FBQXFELEdBQUFDLEVBQUFGLEVBQUFHLHFCQUFBcEQsR0FBQSxFQUNBaUQsR0FBQUksZUFBQXhELEtBQ0FxRCxFQUFBRCxFQUFBSyxjQUFBdEQsR0FBQWtELEVBQUFyRCxHQUFBQSxFQUNBcUQsRUFBQUssSUFBQSxpRkFDQUosRUFBQUssV0FBQUMsYUFBQVAsRUFBQUMsS0FDQWhCLFNBQUEsU0FBQSxvQkEwSUF1QixPQUFBQyxPQUFBeEMiLCJmaWxlIjoiYWxsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8vU2hvcnRlbiBCdXR0b25cbiAgICAgICAgJChcImZvcm1cIikuc3VibWl0KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHZhciBmdWxsVVJMID0gJChcIiNmdWxsVVJMXCIpLnZhbCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgc2hvcnRlblVSTCA9ICQoXCIjc2hvcnRlblVSTFwiKS52YWwoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSAkKFwiI3NlcnZpY2VcIikuZmluZChcIjpzZWxlY3RlZFwiKS52YWwoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jbGVhblxuICAgICAgICAgICAgJChcIiNlcnJvclwiKS50ZXh0KFwiXCIpO1xuICAgICAgICAgICAgJChcIiNzaG9ydGVuVVJMXCIpLnRleHQoXCJcIik7XG4gICAgICAgICAgICAkKFwiI3FyY29kZVwiKS50ZXh0KFwiXCIpO1xuXG4gICAgICAgICAgICBpZiAoIWlzVXJsKGZ1bGxVUkwpKSB7XG4gICAgICAgICAgICAgICAgLy9FcnJvclxuICAgICAgICAgICAgICAgICQoXCIjZm9ybVwiKS5yZW1vdmVDbGFzcyhcImhhcy1zdWNjZXNzXCIpLmFkZENsYXNzKFwiaGFzLWVycm9yXCIpO1xuICAgICAgICAgICAgICAgICQoXCIuZ2x5cGhpY29uXCIpLnJlbW92ZUNsYXNzKFwiZ2x5cGhpY29uLW9rXCIpLmFkZENsYXNzKFwiZ2x5cGhpY29uLXJlbW92ZVwiKTsgICAgXG4gICAgICAgICAgICAgICAgJChcIiNlcnJvclwiKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgJChcIiNlcnJvclwiKS50ZXh0KFwiVVJMIGZvcm1hdCBpcyBub3QgY29ycmVjdFwiKTtcbiAgICAgICAgICAgICAgICAkKFwiI2NsaWNrLXRvLWNvcHlcIikuaGlkZSgpO1xuICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9TdWNjZXNzXG4gICAgICAgICAgICAgICAgJChcIiNmb3JtXCIpLnJlbW92ZUNsYXNzKFwiaGFzLWVycm9yXCIpLmFkZENsYXNzKFwiaGFzLXN1Y2Nlc3NcIik7XG4gICAgICAgICAgICAgICAgJChcIi5nbHlwaGljb25cIikucmVtb3ZlQ2xhc3MoXCJnbHlwaGljb24tcmVtb3ZlXCIpLmFkZENsYXNzKFwiZ2x5cGhpY29uLW9rXCIpO1xuICAgICAgICAgICAgICAgICQoXCIjZXJyb3JcIikuaGlkZSgpO1xuICAgICAgICAgICAgICAgIG1ha2VSZXF1ZXN0KCk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9DbGVhbiBCdXR0b25cbiAgICAgICAgJChcIiNjbGVhblwiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoXCIjZnVsbFVSTFwiKS52YWwoXCJcIik7XG4gICAgICAgICAgICAkKFwiI2Vycm9yXCIpLmhpZGUoKTtcbiAgICAgICAgICAgICQoXCIjZXJyb3JcIikudGV4dChcIlwiKTtcbiAgICAgICAgICAgICQoXCIjY2xpY2stdG8tY29weVwiKS5oaWRlKCk7XG4gICAgICAgICAgICAkKFwiI3Nob3J0ZW5VUkxcIikudGV4dChcIlwiKTtcbiAgICAgICAgICAgICQoXCIjcXJjb2RlXCIpLnRleHQoXCJcIik7XG4gICAgICAgICAgICAkKFwiI2Zvcm1cIikucmVtb3ZlQ2xhc3MoXCJoYXMtZXJyb3JcIikucmVtb3ZlQ2xhc3MoXCJoYXMtc3VjY2Vzc1wiKTtcbiAgICAgICAgICAgICQoXCIuZ2x5cGhpY29uXCIpLnJlbW92ZUNsYXNzKFwiZ2x5cGhpY29uLXJlbW92ZVwiKS5yZW1vdmVDbGFzcyhcImdseXBoaWNvbi1va1wiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9Db3B5IHRvIENsaXBib2FyZFxuICAgICAgICB2YXIgY2xpZW50ID0gbmV3IFplcm9DbGlwYm9hcmQoICQoXCIjY2xpY2stdG8tY29weVwiKSwge1xuICAgICAgICAgICAgICBtb3ZpZVBhdGg6IFwiLi9mbGFzaC9aZXJvQ2xpcGJvYXJkLnN3ZlwiLFxuICAgICAgICAgICAgICBkZWJ1ZzogZmFsc2VcbiAgICAgICAgfSApO1xuXG4gICAgICAgIGNsaWVudC5vbiggXCJsb2FkXCIsIGZ1bmN0aW9uKGNsaWVudCkge1xuICAgICAgICAgICAgICAgIGNsaWVudC5vbiggXCJjb21wbGV0ZVwiLCBmdW5jdGlvbihjbGllbnQsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LnNldFRleHQoIGFyZ3MudGV4dCApOyAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgIH0gKTtcblxuICAgICAgICAvL0NvcHkgdG8gQ2xpcGJvYXJkIFRvb2x0aXBcbiAgICAgICAgJChcIiNjbGljay10by1jb3B5XCIpLnRvb2x0aXAoKTtcblxuICAgICAgICAvL0ZhY2Vib29rIExpa2UgQnV0dG9uXG4gICAgICAgIChmdW5jdGlvbihkLCBzLCBpZCkge1xuICAgICAgICAgICAgICB2YXIganMsIGZqcyA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF07XG4gICAgICAgICAgICAgIGlmIChkLmdldEVsZW1lbnRCeUlkKGlkKSkgcmV0dXJuO1xuICAgICAgICAgICAgICBqcyA9IGQuY3JlYXRlRWxlbWVudChzKTsganMuaWQgPSBpZDtcbiAgICAgICAgICAgICAganMuc3JjID0gXCIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qcyN4ZmJtbD0xJnZlcnNpb249djIuNCZhcHBJZD05MTQ2NDUzMDE5MTkwMDlcIjtcbiAgICAgICAgICAgICAgZmpzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGpzLCBmanMpO1xuICAgICAgICAgICAgfShkb2N1bWVudCwgJ3NjcmlwdCcsICdmYWNlYm9vay1qc3NkaycpKTtcbiAgICAgICBcbn0pO1xuXG5mdW5jdGlvbiBtYWtlUmVxdWVzdCgpIHtcbiAgICB2YXIgc2VydmljZSA9ICQoXCIjc2VydmljZVwiKS5maW5kKFwiOnNlbGVjdGVkXCIpLnZhbCgpO1xuICAgIC8vdmFyIHNlcnZpY2VOYW1lID0gJChcIiNzZXJ2aWNlXCIpLmZpbmQoXCI6c2VsZWN0ZWRcIikudGV4dCgpO1xuICAgIC8vZ2EoJ3NlbmQnLCAnZXZlbnQnLCAnc2VydmljZScsICdjbGljaycsIHNlcnZpY2VOYW1lLCAwKTtcblxuICAgIHN3aXRjaCAoc2VydmljZSkge1xuICAgICAgICBjYXNlIFwiZ1wiOlxuICAgICAgICAgICAgZ2V0R29vZ2xlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJcIjpcbiAgICAgICAgICAgIGdldEJpdGx5KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRcIjpcbiAgICAgICAgICAgIGdldFRpbnlVUkwoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiaVwiOlxuICAgICAgICAgICAgZ2V0SXNnZCgpO1xuICAgICAgICAgICAgYnJlYWs7IFxuICAgICAgICBjYXNlIFwidlwiOlxuICAgICAgICAgICAgZ2V0VmdkKCk7XG4gICAgICAgICAgICBicmVhazsgICAgICAgICBcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIEdvb2dsZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0R29vZ2xlKCkge1xuICAgICAgICB2YXIgZnVsbFVSTCA9ICQoXCIjZnVsbFVSTFwiKS52YWwoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgcmVxdWVzdCA9IGdhcGkuY2xpZW50LnVybHNob3J0ZW5lci51cmwuaW5zZXJ0KHtcbiAgICAgICAgICAncmVzb3VyY2UnOiB7XG4gICAgICAgICAgICAgICdsb25nVXJsJzogZnVsbFVSTFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXF1ZXN0LmV4ZWN1dGUoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgXG4gICAgICAgICAgICBpZighaXNFbXB0eShyZXNwb25zZS5pZCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHJlc3BvbnNlLmlkO1xuICAgICAgICAgICAgICAgICQoXCIjc2hvcnRlblVSTFwiKS50ZXh0KHMpO1xuICAgICAgICAgICAgICAgICQoXCIjY2xpY2stdG8tY29weVwiKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgZ2V0X1FSQ29kZShzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICQoXCIjZXJyb3JcIikuc2hvdygpO1xuICAgICAgICAgICAgICAgICQoXCIjZXJyb3JcIikudGV4dChcImVycm9yOiBjcmVhdGluZyBzaG9ydCB1cmw6IGdvby5nbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEJpdGx5KCkge1xuICAgICAgICB2YXIgdXNlcm5hbWUgPSBcIm9fNHFraGJzNXZsMFwiO1xuICAgICAgICB2YXIga2V5ID0gXCJSXzM3NzM5MzdmMWFjNjRlODhhZTRmZTEzMGQ2MzU2NjgxXCI7XG4gICAgICAgIHZhciBmdWxsVVJMID0gJChcIiNmdWxsVVJMXCIpLnZhbCgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDpcImh0dHBzOi8vYXBpLXNzbC5iaXRseS5jb20vdjMvc2hvcnRlblwiLFxuICAgICAgICAgICAgZGF0YTp7bG9uZ1VybDpmdWxsVVJMLGFwaUtleTprZXksbG9naW46dXNlcm5hbWV9LFxuICAgICAgICAgICAgZGF0YVR5cGU6XCJqc29ucFwiLFxuICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPXYuZGF0YS51cmw7XG4gICAgICAgICAgICAgICAgJChcIiNzaG9ydGVuVVJMXCIpLnRleHQocyk7XG4gICAgICAgICAgICAgICAgJChcIiNjbGljay10by1jb3B5XCIpLnNob3coKTtcbiAgICAgICAgICAgICAgICBnZXRfUVJDb2RlKHMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICQoXCIjZXJyb3JcIikuc2hvdygpO1xuICAgICAgICAgICAgICAgICQoXCIjZXJyb3JcIikudGV4dChcImVycm9yOiBjcmVhdGluZyBzaG9ydCB1cmw6IGJpdC5seVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbn1cblxuZnVuY3Rpb24gZ2V0VGlueVVSTCgpIHtcbiAgICAgICAgdmFyIGZ1bGxVUkwgPSAkKFwiI2Z1bGxVUkxcIikudmFsKCkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAkLmdldEpTT04oXG4gICAgICAgICAgXCJodHRwczovL3VybHRpbnlmeS5hcHBzcG90LmNvbS90aW55dXJsP3VybD1cIitlbmNvZGVVUklDb21wb25lbnQoZnVsbFVSTCkrXCImY2FsbGJhY2s9P1wiLFxuICAgICAgICAgIC8ve3VybDogZnVsbFVSTH0sXG4gICAgICAgICAgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgdmFyIHMgPWRhdGEudGlueXVybDtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNzaG9ydGVuVVJMXCIpLnRleHQocyk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjY2xpY2stdG8tY29weVwiKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIGdldF9RUkNvZGUocyk7XG4gICAgICAgICAgfVxuICAgICAgICApLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7IFxuICAgICAgICAgICAgJChcIiNlcnJvclwiKS5zaG93KCk7XG4gICAgICAgICAgICAkKFwiI2Vycm9yXCIpLnRleHQoXCJlcnJvcjogY3JlYXRpbmcgc2hvcnQgdXJsOiBUaW55VVJMXCIpO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SXNnZCgpIHtcbiAgICAgICAgdmFyIGZ1bGxVUkwgPSAkKFwiI2Z1bGxVUkxcIikudmFsKCkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAkLmdldEpTT04oXG4gICAgICAgICAgXCJodHRwczovL3VybHRpbnlmeS5hcHBzcG90LmNvbS9pc2dkP3VybD1cIitlbmNvZGVVUklDb21wb25lbnQoZnVsbFVSTCkrXCImY2FsbGJhY2s9P1wiLFxuICAgICAgICAgIC8ve3VybDogZnVsbFVSTH0sXG4gICAgICAgICAgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgdmFyIHMgPWRhdGEudGlueXVybDtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNzaG9ydGVuVVJMXCIpLnRleHQocyk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjY2xpY2stdG8tY29weVwiKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIGdldF9RUkNvZGUocyk7XG4gICAgICAgICAgfVxuICAgICAgICApLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7IFxuICAgICAgICAgICAgJChcIiNlcnJvclwiKS5zaG93KCk7XG4gICAgICAgICAgICAkKFwiI2Vycm9yXCIpLnRleHQoXCJlcnJvcjogY3JlYXRpbmcgc2hvcnQgdXJsOiBpcy5nZFwiKTtcbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFZnZCgpICB7XG4gICAgICAgIHZhciBmdWxsVVJMID0gJChcIiNmdWxsVVJMXCIpLnZhbCgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgJC5nZXRKU09OKFxuICAgICAgICAgIFwiaHR0cHM6Ly91cmx0aW55ZnkuYXBwc3BvdC5jb20vdmdkP3VybD1cIitlbmNvZGVVUklDb21wb25lbnQoZnVsbFVSTCkrXCImY2FsbGJhY2s9P1wiLFxuICAgICAgICAgIC8ve3VybDogZnVsbFVSTH0sXG4gICAgICAgICAgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgdmFyIHMgPWRhdGEudGlueXVybDtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNzaG9ydGVuVVJMXCIpLnRleHQocyk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjY2xpY2stdG8tY29weVwiKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIGdldF9RUkNvZGUocyk7XG4gICAgICAgICAgfVxuICAgICAgICApLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7IFxuICAgICAgICAgICAgJChcIiNlcnJvclwiKS5zaG93KCk7XG4gICAgICAgICAgICAkKFwiI2Vycm9yXCIpLnRleHQoXCJlcnJvcjogY3JlYXRpbmcgc2hvcnQgdXJsOiB2LmdkXCIpO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgICAgJChcIiNlcnJvclwiKS5oaWRlKCk7XG4gICAgICAgICQoXCIjZXJyb3JcIikuYWRkQ2xhc3MoXCJpc2FfZXJyb3JcIik7ICAgICAgICBcbiAgICAgICAgJChcIiNjbGljay10by1jb3B5XCIpLmhpZGUoKTtcblxuICAgICAgICBnYXBpLmNsaWVudC5zZXRBcGlLZXkoJ0FJemFTeUFGUEVURWhPTEpHTUxVcTlRbF9vM2x5SnR2SjVJVWFxbycpO1xuICAgICAgICBnYXBpLmNsaWVudC5sb2FkKCd1cmxzaG9ydGVuZXInLCAndjEnLCBmdW5jdGlvbigpe30pO1xufVxud2luZG93Lm9ubG9hZCA9IGxvYWQ7XG4gICAgXG5mdW5jdGlvbiBnZXRfUVJDb2RlKHRleHQpIHtcbiAgICBcbiAgICB2YXIgc2l6ZSA9IDEyMDtcbiAgICBpZiAoIWlzRW1wdHkodGV4dCkpIHsgICBcbiAgICAgICAgalF1ZXJ5KCcjcXJjb2RlJykucXJjb2RlKHt3aWR0aDogc2l6ZSAsaGVpZ2h0OiBzaXplICx0ZXh0OiB0ZXh0fSk7XG4gICAgfVxufSAgICBcblxuZnVuY3Rpb24gaXNVcmwodXJsKSB7XG4gICB2YXIgc3RyUmVnZXggPSBcIl4oKGh0dHBzfGh0dHB8ZnRwfHJ0c3B8bW1zKT86Ly8pXCJcbiAgICAgICAgKyBcIj8oKFswLTlhLXpfIX4qJygpLiY9KyQlLV0rOiApP1swLTlhLXpfIX4qJygpLiY9KyQlLV0rQCk/XCIgLy9mdHDnmoR1c2VyQFxuICAgICAgICArIFwiKChbMC05XXsxLDN9XFwuKXszfVswLTldezEsM31cIiAvLyBJUOW9ouW8j+eahFVSTC0gMTk5LjE5NC41Mi4xODRcbiAgICAgICAgKyBcInxcIiAvLyDlhYHorrhJUOWSjERPTUFJTu+8iOWfn+WQje+8iVxuICAgICAgICArIFwiKFswLTlhLXpfIX4qJygpLV0rXFwuKSpcIiAvLyDln5/lkI0tIHd3dy5cbiAgICAgICAgKyBcIihbMC05YS16XVswLTlhLXotXXswLDYxfSk/WzAtOWEtel1cXC5cIiAvLyDkuoznuqfln5/lkI1cbiAgICAgICAgKyBcIlthLXpdezIsNn0pXCIgLy8gZmlyc3QgbGV2ZWwgZG9tYWluLSAuY29tIG9yIC5tdXNldW1cbiAgICAgICAgLy8rIFwiKDpbMC05XXsxLDR9KT9cIiAvLyDnq6/lj6MtIDo4MFxuICAgICAgICArIFwiKCgvPyl8XCIgLy8gYSBzbGFzaCBpc24ndCByZXF1aXJlZCBpZiB0aGVyZSBpcyBubyBmaWxlIG5hbWVcbiAgICAgICAgKyBcIigvWzAtOWEtel8hfionKCkuOz86QCY9KyQsJSMtXSspKy8/KSRcIjtcbiAgICAgdmFyIHJlPW5ldyBSZWdFeHAoc3RyUmVnZXgpO1xuICAgICByZXR1cm4gcmUudGVzdCh1cmwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5KHN0cikge1xuICAgIHJldHVybiAoIXN0ciB8fCAwID09PSBzdHIubGVuZ3RoKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==