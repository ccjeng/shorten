function makeRequest(){var e=$("#service").find(":selected").val();switch(e){case"g":Google();break;case"b":Bitly();break;default:Google()}}function Google(){var e=$("#fullURL").val(),o=gapi.client.urlshortener.url.insert({resource:{longUrl:e}});o.execute(function(e){if(null!=e.id){var o=e.id;$("#shortenURL").text(o),get_QRCode(o)}else $("#error").text("error: creating short url: goo.gl")})}function Bitly(){var e="o_4qkhbs5vl0",o="R_3773937f1ac64e88ae4fe130d6356681",r=$("#fullURL").val();$.ajax({url:"http://api.bit.ly/v3/shorten",data:{longUrl:r,apiKey:o,login:e},dataType:"jsonp",success:function(e){var o=e.data.url;$("#shortenURL").text(o),get_QRCode(o)},error:function(){$("#error").text("error: creating short url: bit.ly")}})}function load(){gapi.client.setApiKey("AIzaSyAFPETEhOLJGMLUq9Ql_o3lyJtvJ5IUaqo"),gapi.client.load("urlshortener","v1",function(){})}function get_QRCode(e){console.log("text= "+e);var o=120;jQuery("#qrcode").qrcode({width:o,height:o,text:e})}function isUrl(e){var o="^((https|http|ftp|rtsp|mms)?://)?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9a-z_!~*'()-]+.)*([0-9a-z][0-9a-z-]{0,61})?[0-9a-z].[a-z]{2,6})(:[0-9]{1,4})?((/?)|(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$",r=new RegExp(o);return r.test(e)}$(document).ready(function(){$("form").submit(function(e){e.preventDefault();{var o=$("#fullURL").val();$("#shortenURL").val(),$("#service").find(":selected").val()}$("#error").text(""),$("#shortenURL").text(""),$("#qrcode").text(""),isUrl(o)?($("#form").removeClass("has-error").addClass("has-success"),$(".glyphicon").removeClass("glyphicon-remove").addClass("glyphicon-ok"),makeRequest()):($("#form").removeClass("has-success").addClass("has-error"),$(".glyphicon").removeClass("glyphicon-ok").addClass("glyphicon-remove"),$("#error").text("URL format is not correct"))}),$("#clean").click(function(){$("#fullURL").val(""),$("#error").text(""),$("#shortenURL").text(""),$("#qrcode").text(""),$("#form").removeClass("has-error").removeClass("has-success"),$(".glyphicon").removeClass("glyphicon-remove").removeClass("glyphicon-ok")}),$("#copy").click(function(){var e=document.querySelector(".shortenURL");e.select();try{var o=document.execCommand("copy"),r=o?"successful":"unsuccessful";console.log("Copying text command was "+r)}catch(t){console.log("Oops, unable to copy")}})}),window.onload=load;
//# sourceMappingURL=data:application/json;base64,