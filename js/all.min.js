function makeRequest(){var e=$("#service").find(":selected").val();switch(e){case"g":getGoogle();break;case"b":getBitly();break;case"t":getTinyURL();break;case"i":getIsgd();break;case"v":getVgd();break;default:Google()}}function getGoogle(){var e=$("#fullURL").val().toLowerCase(),o=gapi.client.urlshortener.url.insert({resource:{longUrl:e}});o.execute(function(e){if(isEmpty(e.id))$("#error").show(),$("#error").text("error: creating short url: goo.gl");else{var o=e.id;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)}})}function getBitly(){var e="o_4qkhbs5vl0",o="R_3773937f1ac64e88ae4fe130d6356681",r=$("#fullURL").val().toLowerCase();$.ajax({url:"https://api-ssl.bitly.com/v3/shorten",data:{longUrl:r,apiKey:o,login:e},dataType:"jsonp",success:function(e){var o=e.data.url;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)},error:function(){$("#error").show(),$("#error").text("error: creating short url: bit.ly")}})}function getTinyURL(){var e=$("#fullURL").val().toLowerCase();$.getJSON("https://urltinyfy.appspot.com/tinyurl?url="+encodeURIComponent(e)+"&callback=?",function(e){var o=e.tinyurl;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)}).fail(function(e,o,r){$("#error").show(),$("#error").text("error: creating short url: TinyURL")})}function getIsgd(){var e=$("#fullURL").val().toLowerCase();$.getJSON("https://urltinyfy.appspot.com/isgd?url="+encodeURIComponent(e)+"&callback=?",function(e){var o=e.tinyurl;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)}).fail(function(e,o,r){$("#error").show(),$("#error").text("error: creating short url: is.gd")})}function getVgd(){var e=$("#fullURL").val().toLowerCase();$.getJSON("https://urltinyfy.appspot.com/vgd?url="+encodeURIComponent(e)+"&callback=?",function(e){var o=e.tinyurl;$("#shortenURL").text(o),$("#click-to-copy").show(),get_QRCode(o)}).fail(function(e,o,r){$("#error").show(),$("#error").text("error: creating short url: v.gd")})}function load(){$("#error").hide(),$("#error").addClass("isa_error"),$("#click-to-copy").hide(),gapi.client.setApiKey("AIzaSyAFPETEhOLJGMLUq9Ql_o3lyJtvJ5IUaqo"),gapi.client.load("urlshortener","v1",function(){})}function get_QRCode(e){var o=120;isEmpty(e)||jQuery("#qrcode").qrcode({width:o,height:o,text:e})}function isUrl(e){var o="^((https|http|ftp|rtsp|mms)?://)?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9a-z_!~*'()-]+.)*([0-9a-z][0-9a-z-]{0,61})?[0-9a-z].[a-z]{2,6})((/?)|(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$",r=new RegExp(o);return r.test(e)}function isEmpty(e){return!e||0===e.length}$(document).ready(function(){$("form").submit(function(e){e.preventDefault();{var o=$("#fullURL").val().toLowerCase();$("#shortenURL").val(),$("#service").find(":selected").val()}$("#error").text(""),$("#shortenURL").text(""),$("#qrcode").text(""),isUrl(o)?($("#form").removeClass("has-error").addClass("has-success"),$(".glyphicon").removeClass("glyphicon-remove").addClass("glyphicon-ok"),$("#error").hide(),makeRequest()):($("#form").removeClass("has-success").addClass("has-error"),$(".glyphicon").removeClass("glyphicon-ok").addClass("glyphicon-remove"),$("#error").show(),$("#error").text("URL format is not correct"),$("#click-to-copy").hide())}),$("#clean").click(function(){$("#fullURL").val(""),$("#error").hide(),$("#error").text(""),$("#click-to-copy").hide(),$("#shortenURL").text(""),$("#qrcode").text(""),$("#form").removeClass("has-error").removeClass("has-success"),$(".glyphicon").removeClass("glyphicon-remove").removeClass("glyphicon-ok")});var e=new Clipboard("#click-to-copy");e.on("success",function(e){console.info("Action:",e.action),console.info("Text:",e.text),e.clearSelection()}),$("#click-to-copy").tooltip(),function(e,o,r){var t,n=e.getElementsByTagName(o)[0];e.getElementById(r)||(t=e.createElement(o),t.id=r,t.src="//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4&appId=914645301919009",n.parentNode.insertBefore(t,n))}(document,"script","facebook-jssdk")}),window.onload=load;
//# sourceMappingURL=data:application/json;base64,